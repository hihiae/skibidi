repeat wait() until game:IsLoaded()
local Modules, Cached, Functions, Settings = {
    NPCs = {
        ["Sell NPC"] = CFrame.new(92, 4, 2),
        ["Seeds NPC"] = CFrame.new(86, 4, -27)
    },
    EggPosition = {
        [1] = CFrame.new(-289.039246, 2.79752779, 11.7703476, 1, 0, 0, 0, 1, 0, 0, 0, 1),
        [2] = CFrame.new(-289.04126, 2.87552762, 3.73038578, 1, 0, 0, 0, 1, 0, 0, 0, 1),
        [3] = CFrame.new(-289.031219, 2.79752779, 7.74039459, 1, 0, 0, 0, 1, 0, 0, 0, 1)
    },
    Seeds = {
        "Carrot", "Strawberry", "Blueberry", "Orange Tulip", "Tomato",
        "Corn", "Daffodil", "Watermelon", "Pumpkin", "Apple", "Mushroom",
        "Bamboo", "Coconut", "Cactus", "Dragon Fruit", "Mango", "Grape", 
        "Pepper", "Cacao", "Beanstalk", "Ember Lily", "Sugar Apple"
    },
    Gears = {
        "Watering Can",
        "Trowel",
        "Recall Wrench",
        "Basic Sprinkler",
        "Advanced Sprinkler",
        "Godly Sprinkler",
        "Lightning Rod",
        "Master Sprinkler",
        "Favorite Tool",
        "Harvest Tool",
        "Friendship Pot"
    },
    Honeys = {
        "Flower Seed Pack",
        "Lavender",
        "Nectarshade",
        "Nectarine",
        "Hive Fruit",
        "Pollen Radar",
        "Nectar Staff",
        "Honey Sprinkler",
        "Bee Egg",
        "Bee Crate",
        "Honey Comb",
        "Bee Chair",
        "Honey Torch",
        "Honey Walkway"
    },
    Pets = {
        "Golden Lab", "Dog", "Bunny", "Chicken", "Black Bunny",
        "Cat", "Orange Tabby", "Spotted Deer", "Pig", "Owl",
        "Monkey", "Cow", "Silver Monkey", "Wasp", "Tarantula Hawk",
        "Bee", "Honey Bee", "Squirrel", "Frog", "Red Fox",
        "Brown Mouse", "Grey Mouse", "Deer", "Polar Bear", "Hedgehog",
        "Blood Hedgehog", "Snail", "Giant Ant", "Red Giant Ant", "Firefly",
        "Praying Mantis", "Queen Bee", "Butterfly", "Disco Bee", "Blood Kiwi",
        "Moth", "Kiwi", "Panda", "Night Owl", "Blood Owl",
        "Petal Bee", "Dragonfly", "Mole", "Raccoon", "Sea Otter",
        "Chicken Zombie", "Red Dragon", "Golden Bee", "Caterpillar", "Turtle",
        "Moon Cat", "Echo Frog", "Bear Bee"
    },
},{
    RS = game.ReplicatedStorage,
    WS = workspace,
    GameEvent = game.ReplicatedStorage.GameEvents,
    plr = game.Players.LocalPlayer,
    Remotes = require(game.ReplicatedStorage.Modules.Remotes)
},{}, {}
function Modules:New(InstanceName, Settings)
    local Instance = Instance.new(InstanceName)
    for i,v in next, Settings do
        Instance[i] = v
    end
    return Instance
end
function Modules:SaveSettings(Index, Value)
    if Index ~= nil then
        Settings[Index] = Value
    end
    if not isfolder("Zinner Hub Next Gen") then
        makefolder("Zinner Hub Next Gen")
    end
    if not isfolder("Zinner Hub Next Gen/Grow A Garden") then
        makefolder("Zinner Hub Next Gen/Grow A Garden")
    end
    writefile("Zinner Hub Next Gen/Grow A Garden/" .. Cached.plr.Name .. ".json",game:GetService("HttpService"):JSONEncode(Settings))
end
function Modules:ReadSettings()
    local Boolean, Value = pcall(function()
        if not isfolder("Zinner Hub Next Gen") then
            self:ReadSettings()
        end
        return game:GetService("HttpService"):JSONDecode(readfile("Zinner Hub Next Gen/Grow A Garden/" .. Cached.plr.Name .. ".json"))
    end)
    if Boolean then
        return Value
    else
        self:SaveSettings()
        return self:ReadSettings()
    end
end
Settings = Modules:ReadSettings()
function Modules:GetDistance(Part1, Part2)
    local p1 = typeof(Part1) == "CFrame" and Part1 or CFrame.new(Part1)
    local p2 = not Part2 and Cached.plr.Character.PrimaryPart or Part2
    return (p1.Position - p2.Position).Magnitude
end
function Modules:To(Pos)
    Cached.plr.Character.HumanoidRootPart.CFrame = Pos
end
function Modules:GetFarm()  
    for _,v in pairs(Cached.WS.Farm:GetChildren()) do
        if v.Important.Data.Owner.Value == Cached.plr.Name then
            return v
        end
    end
end
function Modules:GetCollect(x)
    Returner = {}
    for r,v in pairs(self:GetFarm():GetChildren()) do
        if v:FindFirstChild("Plants_Physical") then
            for _, fruit in pairs(v["Plants_Physical"]:GetDescendants()) do
                if fruit:IsA("Part") and fruit:FindFirstChild("ProximityPrompt") and fruit.ProximityPrompt.Enabled then
                    if (x and fruit.Parent:GetAttribute(x) or not x) then
                        table.insert(Returner, fruit.Parent)
                    end
                end
            end
        end
    end
    return Returner
end
function Modules:CheckFruitsInBackpack(x)
    local Fruits = {}
    for _,v in next, Cached.plr.Backpack:GetChildren() do
        if v:IsA("Tool") and v:GetAttribute("MaxAge") and (x and v:GetAttribute(x) or not x) then
            table.insert(Fruits, v)
        end
    end
    for _,v in next, Cached.plr.Character:GetChildren() do
        if v:IsA("Tool") and v:GetAttribute("MaxAge") and (x and v:GetAttribute(x) or not x) then
            table.insert(Fruits, v)
        end
    end
    return Fruits
end
function Modules:GetPlantsSeed(x)
    local Seeds = {}
    for _,v in next, Cached.plr.Backpack:GetChildren() do
        if v:GetAttribute("Seed") then
            table.insert(Seeds, v)
        end
    end
    for _,v in next, Cached.plr.Character:GetChildren() do
        if v:GetAttribute("Seed") then
            table.insert(Seeds, v)
        end
    end
    return Seeds
end
function Modules:Get_Center_Points()
    return self:GetFarm().Center_Point.CFrame
end
function Modules:CheckTool(x)
    for r,v in pairs(Cached.plr.Character:GetChildren()) do
        if tostring(v) == x or v.Name == x then
            return v
        end
    end
    for r,v in pairs(Cached.plr.Backpack:GetChildren()) do
        if tostring(v) == x or v.Name == x then
            return v
        end
    end
end
function Modules:EquipTool(z)
    local Toolse = Cached.plr.Backpack:FindFirstChild(z)
    if Toolse and Cached.plr.Character:FindFirstChild("Humanoid") then
        Cached.plr.Character.Humanoid:EquipTool(Toolse)
    end
end
function Modules:CreateFunction(ConfigFunc)
    local ConfigFunc = ConfigFunc or {}
    ConfigFunc["Name"] = ConfigFunc["Name"] or "Missing Name Functions"
    ConfigFunc["Real Function"] = ConfigFunc["Real Function"] or function(...) end
    if not Functions[ConfigFunc["Name"]] then
        table.insert(Functions, {
            ["Name"] = ConfigFunc["Name"],
            ["Function"] = ConfigFunc["Real Function"]
        })
    end
    print("Succesfully Added " .. ConfigFunc["Name"] .. " Function!")
end
function Modules:JoinServer(x)
    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, x, Cached.plr)
end
function Modules:GetRandomPoimts()
    for r,v in next, self:GetFarm():GetChildren() do
        if v.Name == "Important" then
            for r1,v1 in next, v.Plant_Locations:GetChildren() do
                if v1:GetAttribute("Side") == (Settings["Choose Side"] or "Left") then
                    local x1, x2 = -(v1.Size.X) / 2, v1.Size.X / 2
                    local z1, z2 = -(v1.Size.Z) / 2, v1.Size.Z / 2
                    return (v1.CFrame * CFrame.new(math.random(x1, x2), 3, math.random(z1,z2))).Position
                end
            end
        end
    end
end
function Modules:GetSeedWithName(x)
    for r,v in next, Cached.plr.Backpack:GetChildren() do
        if v:IsA("Tool") and string.find(v.Name,x) then
            return v
        end
    end
    for r,v in next, Cached.plr.Character:GetChildren() do
        if v:IsA("Tool") and string.find(v.Name,x) then
            return v
        end
    end
end
function Modules:MakeLibrary()
    local NameHub = "Zinner Hub Grow A Garden"
    local Description = "discord.gg/vU6jRXpYsZ"
    local Scale = game:GetService("UserInputService").TouchEnabled and UDim2.new(0, 530,0, 400) or UDim2.new(0, 600,0, 420)
    Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/HoangNguyenk8/Roblox/refs/heads/main/Fluent.lua"))()
    local Window = Library:Window({
        Title = NameHub,
        Description = Description,
        Size = Scale
    })
    function MakeTab(Title, Icon)
        local Tabs
        ConfigTab = Window:AddTab({
            Title = Title,
            Icon = "rbxassetid://"..tostring(Icon)
        })
        Tabs = ConfigTab
        function ConfigTab:MakeButton(ConfigButton)
            local ConfigButton = ConfigButton or {}
            ConfigButton.Title = ConfigButton.Title or "Missing Button Title"
            ConfigButton.Description = ConfigButton.Description or ""
            ConfigButton.Callback = ConfigButton.Callback or function() end
            return Tabs:AddButton(ConfigButton)
        end
        function ConfigTab:MakeToggle(ConfigToggle)
            local ConfigToggle = ConfigToggle or {}
            ConfigToggle.Title = ConfigToggle.Title or "Missing Toggle Title"
            ConfigToggle.Description = ConfigToggle.Description or ""
            ConfigToggle.Default = ConfigToggle.Default or Settings[ConfigToggle.Title]
            ConfigToggle.Callback = ConfigToggle.Callback or function(v)
                Modules:SaveSettings(ConfigToggle.Title, v)
            end
            return Tabs:AddToggle(ConfigToggle)
        end
        function ConfigTab:MakeDropdown(ConfigDropdown)
            local ConfigDropdown = ConfigDropdown or {}
            ConfigDropdown.Title = ConfigDropdown.Title or "Missing Dropdown Title"
            ConfigDropdown.Description = ConfigDropdown.Description or ""
            ConfigDropdown.Multi = ConfigDropdown.Multi or false
            if ConfigDropdown.Multi then
                if not Settings[ConfigDropdown.Title] then
                    Settings[ConfigDropdown.Title] = {}
                end
            end
            ConfigDropdown.Default = ConfigDropdown.Default or Settings[ConfigDropdown.Title]
            ConfigDropdown.Callback = ConfigDropdown.Callback or function(v)
                Modules:SaveSettings(ConfigDropdown.Title, v)
            end
            return Tabs:AddDropdown(ConfigDropdown)
        end
        function ConfigTab:MakeSlider(ConfigSlider)
            local ConfigSlider = ConfigSlider or {}
            ConfigSlider.Title = ConfigSlider.Title or "Missing Slider Title"
            ConfigSlider.Description = ConfigSlider.Description or ""
            ConfigSlider.Max = ConfigSlider.Max or 100
            ConfigSlider.Min = ConfigSlider.Min or 1
            ConfigSlider.Default = ConfigSlider.Default or (Settings[ConfigSlider.Title] or ConfigSlider.Min)
            ConfigSlider.Callback = ConfigSlider.Callback or function(v)
                Modules:SaveSettings(ConfigSlider.Title, v)
            end
            return Tabs:AddSlider(ConfigSlider)
        end
        function ConfigTab:MakeInput(ConfigInput)
            local ConfigInput = ConfigInput or {}
            ConfigInput.Title = ConfigInput.Title or "Missing Input Title"
            ConfigInput.Description = ConfigInput.Description or ""
            ConfigInput.PlaceHolder = ConfigInput.PlaceHolder or ""
            ConfigInput.Default = ConfigInput.Default or Settings[ConfigInput.Title]
            ConfigInput.Callback = ConfigInput.Callback or function(v)
                Modules:SaveSettings(ConfigInput.Title, v)
            end
            return Tabs:AddInput(ConfigInput)
        end
        function ConfigTab:MakeLabel(ConfigLabel)
            local ConfigLabel = ConfigLabel or {}
            return Tabs:AddParagraph(ConfigLabel)
        end
        function ConfigTab:MakeSection(ConfigSection)
            local ConfigSection = ConfigSection or {}
            return Tabs:AddSeperator(ConfigSection.Title)
        end
        return ConfigTab
    end
    setfpscap(200)
    local ServerTab = MakeTab("Server",122223674767625)
    local ShopTab = MakeTab("Shop",98187796002354)
    local FarmTab = MakeTab("Farm",123626416850621)
    local EventsTab = MakeTab("Events",131112831721886)
    local MiscTab = MakeTab("Misc",119340207028601)
    local StockCheck = ServerTab:MakeLabel({Title = "Stock Reset Time : 0m 0s",Content="Not Thing"})
    ServerTab:MakeInput({Title="Job Id",PlaceHolder="Job Id Input",Default="",Callback=function(v)
        getgenv().JobId = v
    end})
    ServerTab:MakeButton({Title = "Copy Job Id",Description = "Sao chép mã của server hiện tại",Callback=function()
        setclipboard(game.JobId)
    end})
    ServerTab:MakeButton({Title = "Join Job Id",Description = "Teleport đến server có mã bạn đã nhập ở ô trên",Callback=function()
        self:JoinServer(getgenv().JobId)
    end})
    ServerTab:MakeButton({Title = "Rejoin Server",Description = "Vô lại server",Callback=function()
        self:JoinServer(game.JobId)
    end})
    ShopTab:MakeDropdown({Title="Seeds List",Description="Chọn hạn giống để mua",Multi=true,Values=self.Seeds})
    ShopTab:MakeToggle({Title="Auto Buy Seeds",Description="Tự động mua hạt giống đã chọn"})
    FarmTab:MakeToggle({Title="Auto Harvest",Description="Tự động thu hoạch tất cả hạt giống"})
    FarmTab:MakeSection({Title="Sell Options"})
    FarmTab:MakeInput({Title="Input Quantity",PlaceHolder="Number",Description="Nhập số lượng hạt giống khi bạn có sẽ bán"})
    FarmTab:MakeToggle({Title="Auto Sell",Description="Tự động bán vật phẩm trong túi đồ"})
    FarmTab:MakeSection({Title="Plants Options"})
    FarmTab:MakeDropdown({Title="Select Plants",Description="Chọn cây để trồng",Values=self.Seeds,Multi=true})
    FarmTab:MakeDropdown({Title="Select Side",Description="Chọn bên để trồng",Values={"Left","Right"}})
    FarmTab:MakeToggle({Title="Auto Plants",Description="Tự động trồng cây đã chọn"})
    FarmTab:MakeToggle({Title="Auto Plants All",Description="Tự động trồng tất cả cây bạn có"})
    EventsTab:MakeToggle({Title="Auto Collect Pollinated Fruits",Description="Tự động thu hoạch trái cây Pollinated"})
    EventsTab:MakeToggle({Title="Auto Trade Pollinated Fruits",Description="Tự động trao đổi Pollinated trái cây"})
    EventsTab:MakeToggle({Title="Auto Get Honey",Description="Tự động nhận mật ong"})
end
function Modules:MakeFarm()
    self:CreateFunction({
        ["Name"] = "Auto Harvest",
        ["Real Function"] = function()
            spawn(function()
                local dumb = Modules:GetCollect()
                for i,v in next, dumb do
                    if not Settings["Auto Harvest"] then break end
                    Cached.Remotes.Crops.Collect.send({v})
                    task.wait()
                end
            end)
        end
    })
    self:CreateFunction({
        ["Name"] = "Auto Sell",
        ["Real Function"] = function()
            if #self:CheckFruitsInBackpack() >= (tonumber(Settings["Input Quantity"]) or 1) then
                if self:GetDistance(self.NPCs["Sell NPC"]) <= 10 then
                    Cached.GameEvent:WaitForChild("Sell_Inventory"):FireServer(true)
                else
                    self:To(self.NPCs["Sell NPC"])
                end
            end
            task.wait(0.2)
        end
    })
    self:CreateFunction({
        ["Name"] = "Auto Buy Seeds",
        ["Real Function"] = function()
            for i,v in pairs(Settings["Seeds List"]) do
                Cached.GameEvent:WaitForChild("BuySeedStock"):FireServer(v)
            end
        end
    })
    self:CreateFunction({
        ["Name"] = "Auto Plants",
        ["Real Function"] = function()
            for i,v in next, Settings["Select Plants"] do
                if self:GetPlantsSeed() then
                    for i1, v1 in next, self:GetPlantsSeed() do
                        if string.find(v1.Name, v) then
                            repeat task.wait()
                                if self:GetDistance(self:Get_Center_Points().Position) > 30 then
                                    self:To(self:Get_Center_Points())
                                end
                                self:EquipTool(tostring(v1))
                                local args = {
                                    self:GetRandomPoimts(),
                                    v1:GetAttribute("Seed")
                                }
                                Cached.GameEvent:WaitForChild("Plant_RE"):FireServer(unpack(args))
                            until not v1 or not Settings["Auto Plants"] or not self:CheckTool(v1.Name)
                        end
                    end
                end
            end
        end
    })
    self:CreateFunction({
        ["Name"] = "Auto Plants All",
        ["Real Function"] = function()

        end
    })
    self:CreateFunction({
        ["Name"] = "Auto Collect Pollinated Fruits",
        ["Real Function"] = function()
            if self:GetCollect("Pollinated") and #self:CheckFruitsInBackpack() < 200 then
                for i = 1, #Modules:GetCollect("Pollinated"), 100 do
                    if not Settings["Auto Collect Pollinated Fruits"] then break end
                    Cached.Remotes.Crops.Collect.send({
                        table.unpack(Modules:GetCollect("Pollinated"), i, math.min(i + 99, #Modules:GetCollect("Pollinated")))
                    })
                    task.wait(0.5)
                end
            end
        end
    })
    self:CreateFunction({
        ["Name"] = "Auto Trade Pollinated Fruits",
        ["Real Function"] = function()
            if string.find(workspace.HoneyEvent.HoneyCombpressor.Sign.SurfaceGui.TextLabel.Text, "KG") then
                if self:GetSeedWithName("Pollinated") then
                    self:EquipTool(self:GetSeedWithName("Pollinated").Name)
                    Cached.GameEvent:WaitForChild("HoneyMachineService_RE"):FireServer("MachineInteract")
                end
            end
        end
    })
    self:CreateFunction({
        ["Name"] = "Auto Get Honey",
        ["Real Function"] = function()
            if workspace.HoneyEvent.HoneyCombpressor.Spout.Jar:FindFirstChild("HoneyCombpressorPrompt") then
                local Pos = CFrame.new(-107.4845199584961, 4.00001335144043, -5.455662727355957)
                if (Pos.Position - game.Players.LocalPlayer.Character.PrimaryPart.Position).Magnitude <= 10 then
                    fireproximityprompt(workspace.HoneyEvent.HoneyCombpressor.Spout.Jar.HoneyCombpressorPrompt)
                else
                    self:To(Pos)
                end
            end
        end
    })
end
function Modules:LoadFarm()
    task.spawn(function()
        while task.wait() do
            for _,v in pairs(Functions) do
                if Settings[v.Name] then
                    v.Function()
                end
            end
        end
    end)
end
Modules:MakeLibrary()
Modules:MakeFarm()
Modules:LoadFarm()
